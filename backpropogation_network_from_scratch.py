# -*- coding: utf-8 -*-
"""Backpropogation Network from Scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-wSA2dd5CSUZk5E1lLS8dOUXieI78dv4
"""

import numpy as np # For matrix and mathematical calculations
import pandas as pd # For storing and manipulating dataset
import seaborn as sns  # For Visualization of Data
import matplotlib.pyplot as plt # For Visualization of Data
from sklearn.preprocessing import OneHotEncoder # Converts Categorical Attribute to Numerical Attribute Vector
from sklearn.model_selection import train_test_split # To split data into train and test set

"""**1. Data Preprocessing**"""

iris = pd.read_csv("./Iris.csv")
iris.head()

iris = iris.sample(frac=1).reset_index(drop=True) # Shuffling Data
iris.head()

iris.describe()

sns.heatmap(iris.corr(), annot = True); # To observe correlation between attributes

# Visualization of Dataset using Scatterplot
sns.set_style("darkgrid") 
sns.FacetGrid(iris, hue="Species",col='Species', height=4).map(plt.scatter, "SepalLengthCm", "SepalWidthCm").add_legend()
sns.FacetGrid(iris, hue="Species",col='Species', height=4).map(plt.scatter, "PetalLengthCm","PetalWidthCm").add_legend()

# Target or output values
Y = iris.Species

# Checking count of class labels
sns.countplot(Y)
Y.value_counts()

"""**2. Model Algorithm**"""

def NeuralNetwork(X_train, Y_train, X_val=None, Y_val=None, epochs=10, nodes=[], lr=0.15):
    hidden_layers = len(nodes) - 1
    weights = InitializeWeights(nodes)

    for epoch in range(1, epochs+1):
        weights = Train(X_train, Y_train, lr, weights)

        if(epoch % 20 == 0):
            print("Epoch {}".format(epoch))
            print("Training Accuracy:{}".format(Accuracy(X_train, Y_train, weights)))
            if X_val.any():
                print("Validation Accuracy:{}".format(Accuracy(X_val, Y_val, weights)))
            
    return weights

def InitializeWeights(nodes):
    """Initialize weights with random values in [-1, 1] (including bias)"""
    layers, weights = len(nodes), []
    
    for i in range(1, layers):
        w = [[np.random.uniform(-1, 1) for k in range(nodes[i-1] + 1)]
              for j in range(nodes[i])]
        weights.append(np.matrix(w))
    
    return weights

def ForwardPropagation(x, weights, layers):
    activations, layer_input = [x], x
    for j in range(layers):
        activation = Sigmoid(np.dot(layer_input, weights[j].T))
        activations.append(activation)
        layer_input = np.append(1, activation) # Augment with bias
    
    return activations

def BackPropagation(y, activations, weights, layers):
    outputFinal = activations[-1]
    error = np.matrix(y - outputFinal) # Error at output
    
    for j in range(layers, 0, -1):
        currActivation = activations[j]
        
        if(j > 1):
            # Augment previous activation
            prevActivation = np.append(1, activations[j-1])
        else:
            # First hidden layer, prevActivation is input (without bias)
            prevActivation = activations[0]
        
        delta = np.multiply(error, SigmoidDerivative(currActivation))
        weights[j-1] += lr * np.multiply(delta.T, prevActivation)

        w = np.delete(weights[j-1], [0], axis=1) # Remove bias from weights
        error = np.dot(delta, w) # Calculate error for current layer
    
    return weights

def Train(X, Y, lr, weights):
    layers = len(weights)
    for i in range(len(X)):
        x, y = X[i], Y[i]
        x = np.matrix(np.append(1, x)) # Augment feature vector
        
        activations = ForwardPropagation(x, weights, layers)
        weights = BackPropagation(y, activations, weights, layers)

    return weights

def Sigmoid(x):
    return 1 / (1 + np.exp(-x))

def SigmoidDerivative(x):
    return np.multiply(x, 1-x)

def Predict(item, weights):
    layers = len(weights)
    item = np.append(1, item) # Augment feature vector
    
    ##_Forward Propagation_##
    activations = ForwardPropagation(item, weights, layers)
    
    # Output layer values
    outputFinal = activations[-1].A1
    # print(outputFinal)
    index = FindMaxActivation(outputFinal)

    # Initialize prediction vector to zeros
    y = [0 for i in range(len(outputFinal))]
    y[index] = 1  # Set guessed class to 1

    return y # Return prediction vector


def FindMaxActivation(output):
    """Find max activation in output"""
    m, index = output[0], 0
    for i in range(1, len(output)):
        if(output[i] > m):
            m, index = output[i], i
    
    return index

def Accuracy(X, Y, weights):
    """Run set through network, find overall accuracy"""
    correct = 0

    for i in range(len(X)):
        x, y = X[i], list(Y[i])
        guess = Predict(x, weights)

        if(y == guess):
            # Guessed correctly
            correct += 1

    return correct / len(X)

"""**3. Training the BPN Model**"""

# Data or input values - for training neural net
X = iris[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]
X = np.array(X)
X[:5]

# Converting categorical values to One-Hot-Encoded vectors
# [1,0,0] : Iris setosa
# [0,1,0] : Iris versicolor
# [0,0,1] : Iris virginica

one_hot_encoder = OneHotEncoder(sparse=False)

# Target values - for comparing and calculating error values
Y = one_hot_encoder.fit_transform(np.array(Y).reshape(-1, 1))
Y[:5]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15)
X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1)

f = len(X[0]) # Number of features
o = len(Y[0]) # Number of outputs / classes

layers = [f 8, 10 ,8 , o] # Number of nodes in layers
lr, epochs = 0.10, 100

weights = NeuralNetwork(X_train, Y_train, X_val, Y_val, epochs=epochs, nodes=layers, lr=lr);

# Weights after training
weights

"""**4. Model Evaluation**"""

print("Testing Accuracy: {}".format(Accuracy(X_test, Y_test, weights)))

# Inserting random input value outside dataset for class predicition

sep_len = np.random.uniform(4,8)
sep_wid = np.random.uniform(2,5)
pet_len = np.random.uniform(1,7)
pet_wid = np.random.uniform(0.1,2.5)

item=[sep_len,sep_wid,pet_len,pet_wid]
print(item)

predicted_output = Predict(item,weights)
print(predicted_output)
# [1,0,0] : Iris setosa
# [0,1,0] : Iris versicolor
# [0,0,1] : Iris virginica

if predicted_output[0]==1:
  print("Iris setosa")
elif predicted_output[1]==1:
  print("Iris versicolor")
else:
  print("Iris virginica")

